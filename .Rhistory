main = "Distribution of InterPro -log10(E-value)")
abline(v = -log10(max(interpro$evalue)),
col = "red")
summary(interpro$evalue)
# Alignment length
plot(density(log(interpro$query_end - interpro$query_start + 1)),
main = "Distribution of InterPro log-scale alignment lengths")
abline(
v = c(
quantile(log(interpro$query_end - interpro$query_start + 1), .25),
mean(log(interpro$query_end - interpro$query_start + 1)),
median(log(interpro$query_end - interpro$query_start + 1)),
quantile(log(interpro$query_end - interpro$query_start + 1), .75)
),
col = c("black", "green", "chartreuse", "black")
)
summary(interpro$query_end - interpro$query_start + 1)
View(interpro)
table(interpro$status)
View(filter(interpro, evalue > 0.05))
filter(interpro, evalue > 0.05) |> pull(db) |> unique()
filter(interpro, evalue > 0.05 & db == TIGRFAM) |> View()
filter(interpro, evalue > 0.05 & db == "TIGRFAM") |> View()
interpro_header
View(interpro)
gc()
interpro |> filter(str_detect(target_definition, ";"))
interpro |> filter(str_detect(target_definition, ";"))[["target_definition"]]
interpro |> filter(str_detect(target_definition, ";")) |> pull(target_definition)
interpro |> filter(str_detect(target_definition, "|")) |> pull(target_definition)
interpro |> filter(str_detect(target_definition, "\\|")) |> pull(target_definition)
interpro |> filter(str_detect(target_definition, ";")) |> pull(target_definition)
interpro |> filter(str_detect(target_definition, ";")) |> pull(target_definition) |> unique()
interpro |> filter(str_detect(target_definition, ",")) |> pull(target_definition) |> unique()
interpro_header
filter(interpro, interpro_accession == "-") |> pull(target) |> unique()
?split
### Merge hits ----
# Note 1: Because the hits are from 3 different databases, need to merge outputs from each database before being joined to the main 'interpro_merged'.
# Note 2: The field separator for some of the definitions is a semicolon. This is not desirable and after checking, it can be safely converted into a comma.
interpro_merged <- interpro |>
mutate(
target_definition = str_replace(target_definition, ";", ",")
) |>
split(., ~ db)
### Merge hits ----
# Note 1: Because the hits are from 3 different databases, need to merge outputs from each database before being joined to the main 'interpro_merged'.
# Note 2: The field separator for some of the definitions is a semicolon. This is not desirable and after checking, it can be safely converted into a comma.
interpro_merged <- interpro |>
mutate(
target_definition = str_replace(target_definition, ";", ",")
) |>
split(., .$db)
### Merge hits ----
# Note 1: Because the hits are from 3 different databases, need to merge outputs from each database before being joined to the main 'interpro_merged'.
# Note 2: The field separator for some of the definitions is a semicolon. This is not desirable and after checking, it can be safely converted into a comma.
interpro_merged <- interpro |>
mutate(
target_definition = str_replace(target_definition, ";", ",")
) %>%
split(., .$db)
### Merge hits ----
# Note 1: Because the hits are from 3 different databases, need to merge outputs from each database before being joined to the main 'interpro_merged'.
# Note 2: The field separator for some of the definitions is a semicolon. This is not desirable and after checking, it can be safely converted into a comma.
interpro_merged <- interpro %>%
mutate(
target_definition = str_replace(target_definition, ";", ",")
) %>%
split(., .$db)
gc()
View(interpro_merged)
View(interpro_merged[["CDD"]])
interpro_header
interpro_split <- interpro %>%
mutate(
target_definition = str_replace(target_definition, ";", ",")
) %>%
split(., .$db)
rm(interpro_merged)
gc()
interpro_header
interpro_merged <- map2(
interpro_split,
names(interpro_split),
function(df, nm) {
# Arrange and add query range; remove date, status, and MD5
A <- df %>%
arrange(query, query_start) %>%
mutate(
query_range = paste(query_start, query_end, sep = "-")
) %>%
select(-c(query_start, query_end, date, md5, status))
# Reframe multiple hits to list
B <- A %>%
group_by(query, query_length) %>%
reframe(
across(contains(c("target", "interpro", "evalue")), list)
) %>%
mutate(
across(
-c(query, query_length),
~ map_chr(.x, paste, collapse = ";")
)
)
B
}
)
View(interpro_merged)
View(interpro_split)
View(interpro_merged[["CDD"]])
View(interpro_merged[["Pfam"]])
map(interpro_merged, names)
interpro_merged <- map2(
interpro_split,
names(interpro_split),
function(df, nm) {
# Arrange and add query range; remove date, status, and MD5
A <- df %>%
arrange(query, query_start) %>%
mutate(
query_range = paste(query_start, query_end, sep = "-")
) %>%
select(-c(query_start, query_end, date, md5, status))
# Reframe multiple hits to list
B <- A %>%
group_by(query, query_length) %>%
reframe(
across(contains(c("target", "interpro", "evalue")), list)
) %>%
mutate(
across(
-c(query, query_length),
~ map_chr(.x, paste, collapse = ";")
)
)
# Add database to target and interpro column names
C <- B %>%
rename_with(
~ paste0(nm, "_", .x),
contains(c("target", "interpro", "evalue"))
)
# Return results
C
}
)
gc()
View(interpro_merged)
View(interpro_merged[["CDD"]])
View(interpro_merged[["Pfam"]])
interpro_merged <- map2(
interpro_split,
names(interpro_split),
function(df, nm) {
# Arrange and add query range; remove date, status, and MD5
A <- df %>%
arrange(query, query_start) %>%
mutate(
query_range = paste(query_start, query_end, sep = "-")
) %>%
select(-c(query_start, query_end, date, md5, status))
# Reframe multiple hits to list
B <- A %>%
group_by(query, query_length) %>%
reframe(
across(contains(c("target", "interpro", "evalue")), list)
) %>%
mutate(
across(
-c(query, query_length),
~ map_chr(.x, paste, collapse = ";")
)
)
# Add database to target and interpro column names
C <- B %>%
rename_with(
~ paste0(str_to_lower(nm), "_", .x),
contains(c("target", "interpro", "evalue"))
)
# Return results
C
}
)
gc()
View(interpro_merged)
View(interpro_merged[["TIGRFAM"]])
interpro_merged <- reduce(interpro_merged, full_join)
View(interpro_merged)
interpro_merged <- map2(
interpro_split,
names(interpro_split),
function(df, nm) {
# Arrange and add query range; remove date, status, and MD5
A <- df %>%
arrange(query, query_start) %>%
mutate(
query_range = paste(query_start, query_end, sep = "-")
) %>%
select(-c(query_start, query_end, date, md5, status))
# Reframe multiple hits to list
B <- A %>%
group_by(query, query_length) %>%
reframe(
across(
contains(c("query_range", "target", "interpro", "evalue")), list
)
) %>%
mutate(
across(
-c(query, query_length),
~ map_chr(.x, paste, collapse = ";")
)
)
# Add database to target and interpro column names
C <- B %>%
rename_with(
~ paste0(str_to_lower(nm), "_", .x),
contains(c("target", "interpro", "evalue"))
)
# Return results
C
}
) %>%
reduce(., full_join)
View(kofam)
par(mfrow = c(1, 2))
# E-value
plot(density(-log10(kofam$evalue)),
main = "Distribution of KoFam -log10(E-value)")
abline(v = -log10(max(kofam$evalue)),
col = "red")
summary(kofam$evalue)
plot(
density(
kofam$score - kofam$score_threshold
),
main = "Distribution of differences between KoFam score and threshold"
)
# Difference between threshold and scores
plot(
density(
kofam$score - kofam$score_threshold
),
main = "Distribution of KoFam score - threshold"
)
# Difference between threshold and scores
plot(
density(
log(kofam$score - kofam$score_threshold)
),
main = "Distribution of KoFam score - threshold"
)
summary(kofam$score - kofam$score_threshold)
par(mfrow = c(1, 2))
# E-value
plot(density(-log10(kofam$evalue)),
main = "Distribution of KoFam -log10(E-value)")
abline(v = -log10(max(kofam$evalue)),
col = "red")
summary(kofam$evalue)
# Difference between threshold and scores
plot(
density(
log(kofam$score - kofam$score_threshold)
),
main = "Distribution of KoFam log(score - threshold)"
)
abline(
v = c(
min(kofam$score - kofam$score_threshold),
mean(kofam$score - kofam$score_threshold),
median(kofam$score - kofam$score_threshold)
),
col = c("red", "green", "chartreuse")
)
summary(kofam$score - kofam$score_threshold)
mean(kofam$score - kofam$score_threshold)
par(mfrow = c(1, 2))
# E-value
plot(density(-log10(kofam$evalue)),
main = "Distribution of KoFam -log10(E-value)")
abline(v = -log10(max(kofam$evalue)),
col = "red")
summary(kofam$evalue)
# Difference between threshold and scores
plot(
density(
log(kofam$score - kofam$score_threshold)
),
main = "Distribution of KoFam log(score - threshold)"
)
abline(
v = c(
min(kofam$score - kofam$score_threshold),
mean(log(kofam$score - kofam$score_threshold)),
median(log(kofam$score - kofam$score_threshold))
),
col = c("red", "green", "chartreuse")
)
summary(kofam$score - kofam$score_threshold)
plot(density(-log10(kofam$evalue)),
main = "Distribution of KoFam -log10(E-value)")
abline(v = -log10(max(kofam$evalue)),
col = "red")
summary(kofam$evalue)
# Difference between threshold and scores
plot(
density(
log(kofam$score - kofam$score_threshold)
),
main = "Distribution of KoFam log(score - threshold)"
)
abline(
v = c(
min(kofam$score - kofam$score_threshold),
mean(log(kofam$score - kofam$score_threshold)),
median(log(kofam$score - kofam$score_threshold))
),
col = c("red", "green", "blue")
)
summary(kofam$score - kofam$score_threshold)
mean(log(kofam$score - kofam$score_threshold)); median(log(kofam$score - kofam$score_threshold))
mean(log(kofam$score - kofam$score_threshold))
log(kofam$score - kofam$score_threshold)
par(mfrow = c(1, 2))
# E-value
plot(density(-log10(kofam$evalue)),
main = "Distribution of KoFam -log10(E-value)")
abline(v = -log10(max(kofam$evalue)),
col = "red")
summary(kofam$evalue)
# Difference between threshold and scores
plot(
density(
kofam$score - kofam$score_threshold
),
main = "Distribution of KoFam score - threshold"
)
abline(
v = c(
min(kofam$score - kofam$score_threshold),
mean(kofam$score - kofam$score_threshold),
median(kofam$score - kofam$score_threshold)
),
col = c("red", "green", "blue")
)
summary(kofam$score - kofam$score_threshold)
source("C:/Users/jboe440/OneDrive/Current items/Projects/estuarine-CAZyme-diversity/scripts/harmonise_annotations.R", echo=TRUE)
gc()
gc()
gc()
gc()
gc()
## KoFam ----
### Checks ----
# ORFs with multiple hits
countMultipleHits(kofam, "NODE") * 100 / nrow(kofam)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
)
)
View(kofam_merged)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove("\\[|\\]|EC:")
)
View(kofam_merged)
?str_remove
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove("[\\[|\\]|EC:]")
)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove_all("[\\[|\\]|EC:]")
)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove_all("[\\[|\\]|EC:]")
) %>%
group_by(query) %>%
reframe(
across(-query), list
)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove_all("[\\[|\\]|EC:]")
) %>%
group_by(query) %>%
reframe(
everything(), list
)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove_all("[\\[|\\]|EC:]")
) %>%
group_by(query) %>%
reframe(
across(everything(), list)
)
### Merge hits ----
kofam_merged <- kofam %>%
select(-significance) %>%
mutate(
ec_number = if_else(
str_detect(definition, "EC:"),
str_extract(definition, "\\[EC:.*\\]"),
NA_character_
) %>%
str_remove_all("[\\[|\\]|EC:]")
) %>%
group_by(query) %>%
reframe(
across(everything(), list)
) %>%
mutate(
across(
where(is.list),
~ map_chr(.x, paste, collapse = ";")
)
)
map(kofam_merged, class)
source("scripts/utility_functions.R")
# Environment ----
if (!require(tidyverse)) {
install.packages("tidyverse")
library(tidyverse)
} else {
library(tidyverse)
}
# Environment ----
library(tidyverse)
# Data ----
diamond_header <- c(
"query",
"target",
"percent_id",
"align_length",
"mismatch",
"gap_open",
"query_start",
"query_end",
"target_start",
"target_end",
"evalue",
"bitscore",
"query_coverage",
"target_coverage",
"percent_positive"
)
?read_tsv_chunked
fn_cazy <- function(df, pos) filter(df, evalue < 1e-102)
cazy <- read_tsv_chunked(
"results/allbins_pred.CAZyDB_filt.tsv.gz",
col_names = diamond_header,
callback = DataFrameCallback$new(fn_cazy),
chunk_size = 50000
)
head(cazy)
gc()
hist(cazy$query_coverage)
hist(cazy$target_coverage)
hist(cazy$percent_id)
hist(cazy$percent_positive)
sum(cazy$percent_positive > cazy$percent_id)
