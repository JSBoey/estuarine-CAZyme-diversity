title = nm,
x = "Salinity (ppt)",
y = "Procrustes residuals",
colour = "Habitat type",
linetype = "Data subset"
) +
scale_y_continuous(
limits = c(0, 0.3)
) +
scale_colour_manual(
values = habitat_colour,
labels = str_to_title
) +
scale_shape_manual(
values = habitat_shape,
labels = str_to_title
) +
scale_linetype_manual(
values = c("dashed", "twodash"),
labels = labels_lty
) +
theme_bw() +
theme(
panel.grid = element_blank(),
legend.position = "bottom"
)
}, PROCSCR, lmPROCSCR_result, names(PROCSCR), SIMPLIFY = FALSE)
wrap_plots(scatter_proclm, guides = 'collect') &
theme(legend.position = 'bottom')
WTSdiffWGS <- lapply(TPM, \(m) {
# Filter
m <- m[rownames(m) %in% gp_node, colnames(m) %in% overlap_samples]
m[rowSums2(m) > 0, ]
}) %>%
Reduce(
\(wgs, wts) calcMatrixDiff(wgs, wts, method = "ratio", log = TRUE, base = 2), .
) %>%
lapply(., \(delta) as.data.table(delta, keep.rownames = "node")) %>%
rbindlist(., idcol = "sample")
WTSdiffWGS <- METADATA[, .(sample, type, salinity)][
WTSdiffWGS, on = "sample"
]
ggplot(WTSdiffWGS) +
geom_point(aes(x = salinity, y = delta)) +
labs(x = "Salinity (ppt)",
y = "Transcript : Gene TPM") +
facet_grid(. ~ type, labeller = labeller(type = str_to_title)) +
theme_bw()
WTSjaccardWGS <- lapply(BINARY, \(m) {
m <- m[rownames(m) %in% gp_node, colnames(m) %in% overlap_samples]
m[rowSums2(m) > 0, ]
}) %>%
Reduce(\(wgs, wts) calcMatrixJaccard(wgs, wts),. )
WTSjaccardWGS <- data.table(
sample = names(WTSjaccardWGS),
jaccard = sapply(WTSjaccardWGS, \(x) as.vector(x))
)
WTSjaccardWGS <- METADATA[, .(sample, type, salinity)][
WTSjaccardWGS, on = "sample"
]
ggplot(WTSjaccardWGS) +
geom_text(aes(x = salinity, y = jaccard, label = sample)) +
facet_grid(. ~ type, space = "free_x", scales = "free_x") +
theme_bw()
ADIV <- lapply(TPM, \(m) {
m <- m[rowSums2(m) > 0 & rownames(m) %in% gp_node, ]
data.table(
"sample"   = colnames(m),
"richness" = specnumber(m, MARGIN = 2),
"simpsons" = diversity(m, index = "invsimpson", MARGIN = 2)
)
}) %>%
rbindlist(idcol = "srctype")
# Join with metadata and derive evenness
ADIV <- METADATA[
, .(sample, salinity, type)
][
ADIV, on = "sample"
][
, evenness := simpsons/richness
]
melt(
ADIV,
id.vars = c("sample", "srctype", "type", "salinity"),
measure.vars = c("richness", "simpsons", "evenness"),
variable.name = "index",
value.name = "value"
) %>%
ggplot(mapping = aes(x = salinity,
y = value,
colour = type)) +
stat_smooth(method = "loess", se = F, linetype = 2, span = 1) +
geom_point() +
labs(x = "Salinity (ppt)",
colour = "Habitat type") +
scale_colour_manual(values = habitat_colour,
labels = str_to_title) +
facet_wrap(
srctype ~ index,
scales = "free_y",
labeller = labeller(
index = c(
"richness" = "Richness",
"simpsons" = "Simpson's diversity (1/Î»)",
"evenness" = "Simpson's evenness"
),
srctype = c(
"WGS" = "Gene",
"WTS" = "Transcript"
)
)
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title.y = element_blank())
proportion_CAZyme <- lapply(COUNTS, \(m) {
# Create proportions table
pm <- proportions(m, margin = 2)
dt <- as.data.table(pm, keep.rownames = "node")
colSums(dt[node %in% gp_node][, node := NULL]) * 100
})
gp_TPM <- lapply(TPM, \(m) {
m <- m[rownames(m) %in% gp_node, colnames(m) %in% overlap_samples]
DT <- as.data.table(m, keep.rownames = "node")
DT <- melt(DT,
measure = patterns("^(Sed|Filt)"),
variable.name = "sample", value.name = "tpm")
METADATA[, .(sample, type, salinity)][DT, on = "sample"]
}) %>%
rbindlist(idcol = "srctype")
ggplot(gp_TPM[tpm > 0]) +
geom_density(
aes(
x = log2(tpm),
fill = srctype,
),
colour = NA,
alpha = 1/3
) +
facet_wrap(sample ~ ., ncol = 3) +
labs(
x = "TPM-normalised Count (Log-scale)",
y = "Density",
fill = "Data type"
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
dcast(gp_TPM, ... ~ srctype, value.var = "tpm")[WGS > 0 & WTS > 0] %>%
ggplot(
mapping = aes(
x = log2(WGS),
y = log2(WTS)
)
) +
geom_point(size = 0.5, alpha = 0.5) +
facet_wrap(. ~ sample) +
labs(
x = "Gene count (per million, log2 scaled)",
y = "Transcript count (per million, log2 scaled)"
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
endozyme <- c(
"3.2.1.4",
"3.2.1.1",
"3.2.1.8",
"3.2.1.78",
"3.2.1.14",
"laminarin",
"pectin",
"alginate",
"ulvan"
)
names(endozyme) <- ifelse(
grepl("^\\d", endozyme),
c("cellulose", "starch_glycogen", "xylan", "beta_mannan", "chitin"),
endozyme
)
exozyme <- c(
"b_Glc" = "3.2.1.21",
"a_Glc" = "3.2.1.20",
"b_Gal" = "3.2.1.23",
"a_Man" = "3.2.1.24",
"b_Man" = "3.2.1.25",
"b_Xyl" = "3.2.1.37",
"b_Fuc" = "3.2.1.38",
"a_Rha" = "3.2.1.40",
"a_LFuc" = "3.2.1.51",
"b_HexNAc" = "3.2.1.52",
"a_LAraf" = "3.2.1.55"
)
endozyme <- lapply(endozyme, \(s) {
if (grepl("^\\d", s)) {
findCAZymes(s)
} else {
# Do not capture:
# Laminarin: 3.2.1.73 & 3.2.1.75
a <- getCAZyBySubstrate(s, "endo", c("GH", "PL"))
if (s == "laminarin") {
a$EC <- a$EC[!grepl("(3.2.1.73|3.2.1.75)", a$EC)]
}
findCAZymes(a)
}
})
exozyme <- lapply(exozyme, findCAZymes)
lapply(endozyme, \(l) l$WTS) %>%
lapplyAtDepth(2, \(dt) dt$bin) %>%
unwrap() %>%
length()
chkECfam <- function(subs, x) {
lapply(
endozyme[[subs]]$WGS,
\(dt) {
dt[sapply(EC, \(s) x %in% s), .(FAMILY, EC)]$FAMILY
}
) %>%
unwrap() %>%
str_sort(numeric = T)
}
chkECfam("ulvan", "4.2.2.-")
lapply(endozyme$cellulose$WGS, \(dt) length(unwrap(dt$bin)))
getHabitatRedundancy <- function(LIST, srctype) {
lapply(LIST, \(l) l[[srctype]]) %>%
lapplyAtDepth(2, \(dt) {
unique(dt$bin)
})
}
getSalinityRedundancy <- function(LIST, srctype) {
lapply(LIST, \(l) l[[srctype]]) %>%
lapplyAtDepth(2, \(dt) {
wgs_bin <- dt[
, .SD,
.SDcols = patterns("bin|Sed|Filt")
][
, lapply(.SD, sum), by = "bin"
]
wgs_binary <- wgs_bin[, lapply(.SD, \(x) ifelse(x > 0, 1, 0)),
.SDcols = patterns("Sed|Filt")]
colSums(wgs_binary)
}) %>%
purrr::list_transpose() %>%
lapply(\(l) as.data.table(as.data.frame(l), keep.rownames = "sample")) %>%
rbindlist()
}
FR_habitat <- list(
"endo" = getHabitatRedundancy(endozyme, "WGS"),
"exo" = getHabitatRedundancy(exozyme, "WGS")
)
FR_habitat_dt <- lapplyAtDepth(FR_habitat, 3, length) %>%
lapply(\(l) {
purrr::list_transpose(l) %>%
as.data.frame(., row.names = names(l)) %>%
as.data.table(., keep.rownames = "substrate") %>%
.[order(water)]
})
FR_salinity <- list(
"endo" = getSalinityRedundancy(endozyme, "WGS"),
"exo" = getSalinityRedundancy(exozyme, "WGS")
)
barplot_FR_habitat <- lapply(FR_habitat_dt, \(dt) {
# Data preparation
DT <- melt(dt,
measure.vars = c("water", "sediment"),
variable.name = "habitat")
DT$habitat <- factor(DT$habitat, levels = c("sediment", "water"))
DT$substrate <- factor(DT$substrate, levels = dt$substrate)
upper.lim <- max(DT$value) + 10
# Plot
pl <- ggplot(DT) +
geom_col(aes(
x = substrate,
y = value,
fill = habitat
), position = "dodge"
) +
coord_flip() +
labs(
y = "Number of MAGs",
x = "Putative substrate",
fill = "Habitat substrate"
) +
scale_fill_manual(values = habitat_colour, labels = str_to_title) +
scale_y_continuous(
expand = c(0, 0),
limits = c(0, upper.lim)
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
return(list("data" = DT, "figure" = pl))
})
barplot_FR_habitat
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = sqrt(value)
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
CP_habitat <- list(
"endo" = getHabitatRedundancy(endozyme, "WTS"),
"exo" = getHabitatRedundancy(exozyme, "WTS")
)
CP_habitat_dt <- lapplyAtDepth(CP_habitat, 3, length) %>%
lapply(\(l) {
purrr::list_transpose(l) %>%
as.data.frame(., row.names = names(l)) %>%
as.data.table(., keep.rownames = "substrate") %>%
.[order(water)]
})
CP_salinity <- list(
"endo" = getSalinityRedundancy(endozyme, "WTS"),
"exo" = getSalinityRedundancy(exozyme, "WTS")
)
barplot_CP_habitat <- lapply(CP_habitat_dt, \(dt) {
# Data preparation
DT <- melt(dt,
measure.vars = c("water", "sediment"),
variable.name = "habitat")
DT$habitat <- factor(DT$habitat, levels = c("sediment", "water"))
DT$substrate <- factor(DT$substrate, levels = dt$substrate)
upper.lim <- max(DT$value) + 10
# Plot
pl <- ggplot(DT) +
geom_col(aes(
x = substrate,
y = value,
fill = habitat
), position = "dodge"
) +
coord_flip() +
labs(
y = "Number of MAGs",
x = "Putative substrate",
fill = "Habitat substrate"
) +
scale_fill_manual(values = habitat_colour, labels = str_to_title) +
scale_y_continuous(
expand = c(0, 0),
limits = c(0, upper.lim)
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
return(list("data" = DT, "figure" = pl))
})
barplot_CP_habitat
heatmap_CP_salinity <- lapply(CP_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = sqrt(value)
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_CP_salinity
View(endozyme)
View(endozyme[["chitin"]][["WGS"]][["water"]])
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = value
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = value/144
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
View(endozyme[["chitin"]][["WGS"]][["sediment"]])
View(BINCOV)
ifelse(BINCOV > 1, round(BINCOV, 2), 0) %>% View()
ifelse(BINCOV > 1, round(BINCOV, 2), 0) %>% View()
