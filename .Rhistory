"3.2.1.78",
"3.2.1.14",
"laminarin",
"pectin",
"alginate",
"ulvan"
)
names(endozyme) <- ifelse(
grepl("^\\d", endozyme),
c("cellulose", "starch_glycogen", "xylan", "beta_mannan", "chitin"),
endozyme
)
exozyme <- c(
"b_Glc" = "3.2.1.21",
"a_Glc" = "3.2.1.20",
"b_Gal" = "3.2.1.23",
"a_Man" = "3.2.1.24",
"b_Man" = "3.2.1.25",
"b_Xyl" = "3.2.1.37",
"b_Fuc" = "3.2.1.38",
"a_Rha" = "3.2.1.40",
"a_LFuc" = "3.2.1.51",
"b_HexNAc" = "3.2.1.52",
"a_LAraf" = "3.2.1.55"
)
endozyme <- lapply(endozyme, \(s) {
if (grepl("^\\d", s)) {
findCAZymes(s)
} else {
# Do not capture:
# Laminarin: 3.2.1.73 & 3.2.1.75
a <- getCAZyBySubstrate(s, "endo", c("GH", "PL"))
if (s == "laminarin") {
a$EC <- a$EC[!grepl("(3.2.1.73|3.2.1.75)", a$EC)]
}
findCAZymes(a)
}
})
exozyme <- lapply(exozyme, findCAZymes)
lapply(endozyme, \(l) l$WTS) %>%
lapplyAtDepth(2, \(dt) dt$bin) %>%
unwrap() %>%
length()
chkECfam <- function(subs, x) {
lapply(
endozyme[[subs]]$WGS,
\(dt) {
dt[sapply(EC, \(s) x %in% s), .(FAMILY, EC)]$FAMILY
}
) %>%
unwrap() %>%
str_sort(numeric = T)
}
chkECfam("ulvan", "4.2.2.-")
lapply(endozyme$cellulose$WGS, \(dt) length(unwrap(dt$bin)))
getHabitatRedundancy <- function(LIST, srctype) {
lapply(LIST, \(l) l[[srctype]]) %>%
lapplyAtDepth(2, \(dt) {
unique(dt$bin)
})
}
getSalinityRedundancy <- function(LIST, srctype) {
lapply(LIST, \(l) l[[srctype]]) %>%
lapplyAtDepth(2, \(dt) {
wgs_bin <- dt[
, .SD,
.SDcols = patterns("bin|Sed|Filt")
][
, lapply(.SD, sum), by = "bin"
]
wgs_binary <- wgs_bin[, lapply(.SD, \(x) ifelse(x > 0, 1, 0)),
.SDcols = patterns("Sed|Filt")]
colSums(wgs_binary)
}) %>%
purrr::list_transpose() %>%
lapply(\(l) as.data.table(as.data.frame(l), keep.rownames = "sample")) %>%
rbindlist()
}
FR_habitat <- list(
"endo" = getHabitatRedundancy(endozyme, "WGS"),
"exo" = getHabitatRedundancy(exozyme, "WGS")
)
FR_habitat_dt <- lapplyAtDepth(FR_habitat, 3, length) %>%
lapply(\(l) {
purrr::list_transpose(l) %>%
as.data.frame(., row.names = names(l)) %>%
as.data.table(., keep.rownames = "substrate") %>%
.[order(water)]
})
FR_salinity <- list(
"endo" = getSalinityRedundancy(endozyme, "WGS"),
"exo" = getSalinityRedundancy(exozyme, "WGS")
)
barplot_FR_habitat <- lapply(FR_habitat_dt, \(dt) {
# Data preparation
DT <- melt(dt,
measure.vars = c("water", "sediment"),
variable.name = "habitat")
DT$habitat <- factor(DT$habitat, levels = c("sediment", "water"))
DT$substrate <- factor(DT$substrate, levels = dt$substrate)
upper.lim <- max(DT$value) + 10
# Plot
pl <- ggplot(DT) +
geom_col(aes(
x = substrate,
y = value,
fill = habitat
), position = "dodge"
) +
coord_flip() +
labs(
y = "Number of MAGs",
x = "Putative substrate",
fill = "Habitat substrate"
) +
scale_fill_manual(values = habitat_colour, labels = str_to_title) +
scale_y_continuous(
expand = c(0, 0),
limits = c(0, upper.lim)
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
return(list("data" = DT, "figure" = pl))
})
barplot_FR_habitat
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = sqrt(value)
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
CP_habitat <- list(
"endo" = getHabitatRedundancy(endozyme, "WTS"),
"exo" = getHabitatRedundancy(exozyme, "WTS")
)
CP_habitat_dt <- lapplyAtDepth(CP_habitat, 3, length) %>%
lapply(\(l) {
purrr::list_transpose(l) %>%
as.data.frame(., row.names = names(l)) %>%
as.data.table(., keep.rownames = "substrate") %>%
.[order(water)]
})
CP_salinity <- list(
"endo" = getSalinityRedundancy(endozyme, "WTS"),
"exo" = getSalinityRedundancy(exozyme, "WTS")
)
barplot_CP_habitat <- lapply(CP_habitat_dt, \(dt) {
# Data preparation
DT <- melt(dt,
measure.vars = c("water", "sediment"),
variable.name = "habitat")
DT$habitat <- factor(DT$habitat, levels = c("sediment", "water"))
DT$substrate <- factor(DT$substrate, levels = dt$substrate)
upper.lim <- max(DT$value) + 10
# Plot
pl <- ggplot(DT) +
geom_col(aes(
x = substrate,
y = value,
fill = habitat
), position = "dodge"
) +
coord_flip() +
labs(
y = "Number of MAGs",
x = "Putative substrate",
fill = "Habitat substrate"
) +
scale_fill_manual(values = habitat_colour, labels = str_to_title) +
scale_y_continuous(
expand = c(0, 0),
limits = c(0, upper.lim)
) +
theme_bw() +
theme(
panel.grid = element_blank()
)
return(list("data" = DT, "figure" = pl))
})
barplot_CP_habitat
heatmap_CP_salinity <- lapply(CP_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = sqrt(value)
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_CP_salinity
View(endozyme)
View(endozyme[["chitin"]][["WGS"]][["water"]])
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = value
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
heatmap_FR_salinity <- lapply(FR_salinity, \(dt) {
# Hierarchical clustering of substrate
m <- as.matrix(dt, rownames = "sample")
h <- hclust(dist(t(m)), method = "complete")
substrate.order <- h$labels[h$order]
# Data preparation
DT <- melt(dt, id.vars = "sample", variable.name = "substrate")
DT[
, `:=`(substrate = factor(substrate, levels = substrate.order),
sample = factor(sample, levels = dt$sample),
habitat = ifelse(grepl("Filt", sample), "Water", "Sediment"))
][
, habitat := factor(habitat, levels = c("Water", "Sediment"))
]
# Plot
pl <- ggplot(DT) +
geom_tile(aes(
x = sample,
y = substrate,
fill = value/144
)) +
scale_fill_viridis_c() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(
x = "Sample",
y = "Putative substrates",
fill = "Number of MAGs",
caption = "Number of MAGs were square-root transformed to aid visualising small values."
) +
facet_grid(cols = vars(habitat), space = "free_x", scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5),
legend.position = "bottom"
)
list("data" = DT, "hclust" = h, "figure" = pl)
})
heatmap_FR_salinity
View(endozyme[["chitin"]][["WGS"]][["sediment"]])
View(BINCOV)
ifelse(BINCOV > 1, round(BINCOV, 2), 0) %>% View()
ifelse(BINCOV > 1, round(BINCOV, 2), 0) %>% View()
gc()
?library
?message
sessionInfo()
sessionInfo()
parallel::detectCores()
sessionInfo()
edgeR::filterByExpr.default
?edgeR::filterByExpr()
dynamicRequire <- function(lib) {
if (!require(lib, character.only = TRUE)) install.packages(lib)
library(lib, character.only = TRUE, quietly = TRUE, verbose = FALSE)
invisible(lib)
}
dynamicRequire <- Vectorize(dynamicRequire)
libs <- c(
# Fast utilities
"Rfast", "Rfast2",
# Ecology
"vegan",
# Strings
"stringr", "glue",
# Tabular operations
"data.table", "dplyr",
# Functional programming
"magrittr", "future.apply",
# Visualisation
"ggplot2"
)
dynamicRequire(libs)
srctype <- c("WGS", "WTS") %>%
setNames(nm = .)
BINCOV <- fread("data/bin_coverage.txt")
COUNTS <- lapply(srctype, \(s) fread(glue("results/{s}_clean_count.tsv.gz")))
ANNOTATION <- fread("results/curated_annotation_table.tsv")
CHECKM <- fread("results/hq_bins.checkm_data.txt.gz")
TAXONOMY <- fread("data/bin_taxonomy_final.txt")
CAZYME <- readRDS("data/curated_cazymes_substrates.rds")
METADATA <- fread("data/sample_metadata.txt")
SUMMARY <- lapply(srctype, \(s) fread(glue("results/{s}_count.tsv.summary")))
SUBSTRATE <- readxl::read_excel("data/curated_dbcansub_substrate_map_2.xlsx")
ANNOTATION$bin <- str_remove(ANNOTATION$bin, "_pred$")
setnames(BINCOV, \(nm) {
case_when(
str_detect(nm, "Filt") ~ str_replace(nm, "(.*)", "\\1_1"),
str_detect(nm, "Sed") ~ str_remove(nm, "Sample"),
.default = nm
)
})
BINCOV <- as.matrix(BINCOV[, -1], rownames = BINCOV$bin)
setnames(CHECKM, \(nm) str_replace(nm, " ", "_"))
COUNTS <- lapply(COUNTS, \(dt) {
nm <- names(dt)[names(dt) %in% METADATA$sample]
as.matrix(dt[, .SD, .SDcols = nm], rownames = dt$Geneid)
})
SUMMARY <- lapply(SUMMARY, \(dt) {
setnames(dt, \(nm) str_extract(nm, "(Filt|Sed).S\\d_\\d"))
})
tax_level <- c("domain", "phylum", "class", "order", "family", "genus", "species")
TAXONOMY <- TAXONOMY[
, (tax_level) := tstrsplit(gtdb_taxonomy, ";", fill = NA)
][
, (tax_level) := lapply(.SD, \(s) gsub("[a-z]__", "", s)), .SDcols = tax_level
][
, c("gtdb_taxonomy", "taxa") := NULL
]
setDT(SUBSTRATE)
setDT(CAZYME)
habitat_colour <- c("sediment" = "#F89812", "water" = "#25A7F8")
habitat_shape = c("sediment" = 17, "water" = 19)
cazyme_colour <- c("GH" = "#CE1235", "PL" = "#59C9A5")
gp_node <- unique(CAZYME$NODE[grepl("(GH|PL)", CAZYME$FAMILY)])
overlap_samples <- Reduce(intersect, lapply(COUNTS, colnames))
geneLength <- with(ANNOTATION, end - start + 1)
RPK <- lapply(COUNTS, \(m) calcRPK(m, geneLength))
calcRPK <- function(m, gene.length) sweep(m, 1, gene.length/1e3, "/")
geneLength <- with(ANNOTATION, end - start + 1)
RPK <- lapply(COUNTS, \(m) calcRPK(m, geneLength))
View(RPK)
lobstr::obj_size(RPK)
View(COUNTS)
View(COUNTS$WGS)
RPK <- lapply(COUNTS, \(m) calcRPK(m, geneLength)) %>%
lapply(., \(m) m[rownames(m) %in% unique(CAZYME$NODE)])
RPK <- lapply(COUNTS, \(m) m[rownames(m) %in% unique(CAZYME$NODE)])
View(RPK)
RPK <- lapply(COUNTS, \(m) m[rownames(m) %in% unique(CAZYME$NODE), ])
sum(RPK$WTS > 4)
sum(RPK$WTS > 4) / length(RPK$WTS)
RPK <- lapply(COUNTS, \(m) {
cond <- rownames(m) %in% unique(CAZYME$NODE) & rowSums(m) > 0
m[cond, ]
})
sum(RPK$WTS > 4)
RPK <- lapply(COUNTS, \(m) {
m <- ifelse(m < 4, 0, m)
cond <- rownames(m) %in% unique(CAZYME$NODE) & rowSums(m) > 0
m[cond, ]
})
sum(RPK$WTS > 4)
splitCount <- lapply(COUNTS, \(m) {
list(
"water" = m[, grepl("Filt", colnames(m))],
"sediment" = m[, grepl("Sed", colnames(m))]
)
}) %>%
unlist(recursive = FALSE)
View(splitCount)
RPK <- lapply(splitCount, \(m) {
cond <- rownames(m) %in% unique(CAZYME$NODE) & rowSums(m) > 0
m <- m[cond, ]
calcRPK(m, geneLength)
})
RPK <- lapply(splitCount, \(m) {
m <- calcRPK(m, geneLength)
cond <- rownames(m) %in% unique(CAZYME$NODE) & rowSums(m) > 0
m <- m[cond, ]
})
View(RPK)
View(RPK$WTS.water)
BiocManager::install("HTSFilter")
library(HTSFilter)
?HTSFilter()
?HTSFilter
RPK2 <- lapply(splitCount, \(m) {
pa <- ifelse(m > 0, 1, 0)
cond <- rownames(m) %in% unique(CAZYME$NODE) & rowSums(pa) == ncol(m)
m[cond, ]
})
View(RPK2)
RPK2[["WGS.water"]]
RPK2 <- lapply(splitCount, \(m) {
pa <- ifelse(m > 0, 1, 0)
cond <- rowSums(pa) == ncol(m)
m[cond, ]
})
RPK3 <- lapply(RPK2, rowVars)
View(RPK3)
RPK3[["WGS.water"]]
View(SUMMARY)
View(SUMMARY[["WTS"]])
View(SUMMARY[["WTS"]])
RPK3 <- lapply(RPK2, rowVars, std = TRUE)
RPK3
colSums(SUMMARY[["WTS"]][, -1])
colSums(SUMMARY[["WTS"]][, -1]) / 1e6
calcTPM <- function(m, gene.length) {
m <- calcRPK(m, gene.length)
lib.size <- colSums(rpk) / 1e6
sweep(m, 2, lib.size, "/")
}
TPM <- lapply(COUNTS, calcTPM, geneLength)
calcTPM <- function(m, gene.length) {
m <- calcRPK(m, gene.length)
lib.size <- colSums(m) / 1e6
sweep(m, 2, lib.size, "/")
}
TPM <- lapply(COUNTS, calcTPM, geneLength)
gc()
rm(splitCount, RPK, RPK2, RPK3)
gc()
edgeR::cpm.default()
edgeR::cpm.default
?edgeR::cpm.default
CPM <- lapply(COUNTS, edgeR::cpm.default)
plot(TPM$WTS ~ COUNTS$WTS)
srctype <- c("WGS", "WTS") %>%
setNames(nm = .)
BINCOV <- fread("data/bin_coverage.txt")
COUNTS <- lapply(srctype, \(s) fread(glue("results/{s}_clean_count.tsv.gz")))
