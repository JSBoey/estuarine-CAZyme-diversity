a <- ordiArrowMul(.x, display = "bp")
if (is.infinite(a)) {
a <- 1
} else if (a < 1) {
a <- 3
}
return(a)
}) %>%
list_flatten()
### Ordination plot
CO_plot <- pmap(
list(CO_score, CO_statistic, CO_arrowMultiplier), \(scr, st, mul) {
# Get axis names prior to standardisation
axis_name <- names(scr)[1:2]
# Standardise axis names for ggplot call
names(scr)[1:2] <- c("x", "y")
# Main plotting variables
site_score <- filter(scr, score == "sites")
centroid <- filter(scr, score == "centroids")
biplot <- filter(scr, score == "biplot") %>%
mutate(
across(c(x, y), \(axis) axis * mul)
)
# Axis variables
axis_variation <- proportions(as.matrix(st[["axis"]][, 2]))[1:2]
axis_label <- paste0(
axis_name, " (", round(axis_variation * 100, 2), "%)"
)
ggplot() +
geom_hline(
yintercept = 0, colour = "grey40", linetype = 2
) +
geom_vline(
xintercept = 0, colour = "grey40", linetype = 2
) +
geom_point(
mapping = aes(x = x, y = y, colour = salinity, shape = type),
data = site_score
) +
geom_segment(
mapping = aes(xend = x, yend = y, x = 0, y = 0),
data = biplot,
arrow = arrow(length = unit(0.03, units = "npc"))
) +
geom_text(
mapping = aes(x = x, y = y, label = label),
data = centroid
) +
labs(
x = axis_label[[1]],
y = axis_label[[2]],
colour = "Salinity ‰",
shape = "Sample type"
) +
scale_colour_viridis_c(
limits = c(0, 35)
) +
scale_shape_manual(
values = c("sediment" = 15, "water" = 16),
labels = str_to_title
) +
theme_bw() +
theme(
aspect.ratio = 1,
panel.grid = element_blank()
)
}
)
CO_plot$wgs_RCLR
View(CO_arrowMultiplier)
CO_arrowMultiplier <- map_depth(CO, 2, ~ {
a <- ordiArrowMul(.x, display = "bp")
if (is.infinite(a)) {
a <- 1
} else if (a < 2) {
a <- 3
}
return(a)
}) %>%
list_flatten()
### Ordination plot
CO_plot <- pmap(
list(CO_score, CO_statistic, CO_arrowMultiplier), \(scr, st, mul) {
# Get axis names prior to standardisation
axis_name <- names(scr)[1:2]
# Standardise axis names for ggplot call
names(scr)[1:2] <- c("x", "y")
# Main plotting variables
site_score <- filter(scr, score == "sites")
centroid <- filter(scr, score == "centroids")
biplot <- filter(scr, score == "biplot") %>%
mutate(
across(c(x, y), \(axis) axis * mul)
)
# Axis variables
axis_variation <- proportions(as.matrix(st[["axis"]][, 2]))[1:2]
axis_label <- paste0(
axis_name, " (", round(axis_variation * 100, 2), "%)"
)
ggplot() +
geom_hline(
yintercept = 0, colour = "grey40", linetype = 2
) +
geom_vline(
xintercept = 0, colour = "grey40", linetype = 2
) +
geom_point(
mapping = aes(x = x, y = y, colour = salinity, shape = type),
data = site_score
) +
geom_segment(
mapping = aes(xend = x, yend = y, x = 0, y = 0),
data = biplot,
arrow = arrow(length = unit(0.03, units = "npc"))
) +
geom_text(
mapping = aes(x = x, y = y, label = label),
data = centroid
) +
labs(
x = axis_label[[1]],
y = axis_label[[2]],
colour = "Salinity ‰",
shape = "Sample type"
) +
scale_colour_viridis_c(
limits = c(0, 35)
) +
scale_shape_manual(
values = c("sediment" = 15, "water" = 16),
labels = str_to_title
) +
theme_bw() +
theme(
aspect.ratio = 1,
panel.grid = element_blank()
)
}
)
CO_plot$wgs_RCLR
CO_plot$wts_RCLR
CO_plot$wts_TPM
### Ordination plot
CO_plot <- pmap(
list(CO_score, CO_statistic, CO_arrowMultiplier), \(scr, st, mul) {
# Get axis names prior to standardisation
axis_name <- names(scr)[1:2]
# Standardise axis names for ggplot call
names(scr)[1:2] <- c("x", "y")
# Main plotting variables
site_score <- filter(scr, score == "sites")
centroid <- filter(scr, score == "centroids") %>%
mutate(
label = str_to_title(str_remove(label, "Type"))
)
biplot <- filter(scr, score == "biplot") %>%
mutate(
across(c(x, y), \(axis) axis * mul)
)
# Axis variables
axis_variation <- proportions(as.matrix(st[["axis"]][, 2]))[1:2]
axis_label <- paste0(
axis_name, " (", round(axis_variation * 100, 2), "%)"
)
ggplot() +
geom_hline(
yintercept = 0, colour = "grey40", linetype = 2
) +
geom_vline(
xintercept = 0, colour = "grey40", linetype = 2
) +
geom_point(
mapping = aes(x = x, y = y, colour = salinity, shape = type),
data = site_score
) +
geom_segment(
mapping = aes(xend = x, yend = y, x = 0, y = 0),
data = biplot,
arrow = arrow(length = unit(0.03, units = "npc"))
) +
geom_text(
mapping = aes(x = x, y = y, label = label),
data = centroid
) +
labs(
x = axis_label[[1]],
y = axis_label[[2]],
colour = "Salinity ‰",
shape = "Sample type"
) +
scale_colour_viridis_c(
limits = c(0, 35)
) +
scale_shape_manual(
values = c("sediment" = 15, "water" = 16),
labels = str_to_title
) +
theme_bw() +
theme(
aspect.ratio = 1,
panel.grid = element_blank()
)
}
)
CO_plot$wts_TPM
### Ordination plot
CO_plot <- pmap(
list(CO_score, CO_statistic, CO_arrowMultiplier), \(scr, st, mul) {
# Get axis names prior to standardisation
axis_name <- names(scr)[1:2]
# Standardise axis names for ggplot call
names(scr)[1:2] <- c("x", "y")
# Main plotting variables
site_score <- filter(scr, score == "sites")
centroid <- filter(scr, score == "centroids") %>%
mutate(
label = str_to_title(str_remove(label, "type"))
)
biplot <- filter(scr, score == "biplot") %>%
mutate(
across(c(x, y), \(axis) axis * mul)
)
# Axis variables
axis_variation <- proportions(as.matrix(st[["axis"]][, 2]))[1:2]
axis_label <- paste0(
axis_name, " (", round(axis_variation * 100, 2), "%)"
)
ggplot() +
geom_hline(
yintercept = 0, colour = "grey40", linetype = 2
) +
geom_vline(
xintercept = 0, colour = "grey40", linetype = 2
) +
geom_point(
mapping = aes(x = x, y = y, colour = salinity, shape = type),
data = site_score
) +
geom_segment(
mapping = aes(xend = x, yend = y, x = 0, y = 0),
data = biplot,
arrow = arrow(length = unit(0.03, units = "npc"))
) +
geom_text(
mapping = aes(x = x, y = y, label = label),
data = centroid
) +
labs(
x = axis_label[[1]],
y = axis_label[[2]],
colour = "Salinity ‰",
shape = "Sample type"
) +
scale_colour_viridis_c(
limits = c(0, 35)
) +
scale_shape_manual(
values = c("sediment" = 15, "water" = 16),
labels = str_to_title
) +
theme_bw() +
theme(
aspect.ratio = 1,
panel.grid = element_blank()
)
}
)
patchwork::wrap_plots(CO_plot)
### Ordination plot
CO_plot <- pmap(
list(CO_score, CO_statistic, CO_arrowMultiplier), \(scr, st, mul) {
# Get axis names prior to standardisation
axis_name <- names(scr)[1:2]
# Standardise axis names for ggplot call
names(scr)[1:2] <- c("x", "y")
# Main plotting variables
site_score <- filter(scr, score == "sites")
centroid <- filter(scr, score == "centroids") %>%
mutate(
label = str_to_title(str_remove(label, "type"))
)
biplot <- filter(scr, score == "biplot") %>%
mutate(
across(c(x, y), \(axis) axis * mul)
)
# Axis variables
axis_variation <- proportions(as.matrix(st[["axis"]][, 2]))[1:2]
axis_label <- paste0(
axis_name, " (", round(axis_variation * 100, 2), "%)"
)
ggplot() +
geom_hline(
yintercept = 0, colour = "grey40", linetype = 2
) +
geom_vline(
xintercept = 0, colour = "grey40", linetype = 2
) +
geom_segment(
mapping = aes(xend = x, yend = y, x = 0, y = 0),
data = biplot,
arrow = arrow(length = unit(0.03, units = "npc"))
) +
geom_point(
mapping = aes(x = x, y = y, colour = salinity, shape = type),
data = site_score
) +
geom_text(
mapping = aes(x = x, y = y, label = label),
data = centroid
) +
labs(
x = axis_label[[1]],
y = axis_label[[2]],
colour = "Salinity ‰",
shape = "Sample type"
) +
scale_colour_viridis_c(
limits = c(0, 35)
) +
scale_shape_manual(
values = c("sediment" = 15, "water" = 16),
labels = str_to_title
) +
theme_bw() +
theme(
aspect.ratio = 1,
panel.grid = element_blank()
)
}
)
patchwork::wrap_plots(CO_plot)
View(BD)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/jboe440/OneDrive/Current items/Projects/estuarine-CAZyme-diversity/docs/CAZyme_alpha_diversity.R", echo=TRUE)
source("C:/Users/jboe440/OneDrive/Current items/Projects/estuarine-CAZyme-diversity/docs/CAZyme_alpha_diversity.R", echo=TRUE)
View(wgs_sum)
View(cazy_specifcity)
View(wts_sum)
# CAZyme family specificity ----
family_count <- list(
"wgs" = wgs_sum,
"wts" = wts_sum
)
# CAZyme family specificity ----
family_count <- list(
"wgs" = wgs_sum,
"wts" = wts_sum
) %>%
map(\(x) as.matrix(column_to_rownames(x, "cazy_family")))
View(family_count)
family_spec <- map(family_count, geneSpecificity)
View(family_spec)
family_spec[["wgs"]]
family_spec <- map(family_count, \(x) geneSpecificity(x) / log2(ncol(x)))
family_spec
hist(family_spec$wts)
family_spec <- map(family_count, \(x) geneSpecificity(x) / log2(ncol(x))) %>%
map(~ .x[order(.x)])
family_spec$wts
family_pa <- map(family_count, \(x) decostand(x, "pa"))
family_pa <- map(family_count, \(x) rowSums(decostand(x, "pa")))
family_pa$wts
as.data.frame(family_pa$wts)
as.data.frame(n_sample = family_pa$wts)
as.data.frame("n_sample" = family_pa$wts)
data.frame("n_sample" = family_pa$wts)
family_spec_pa <- map2(family_pa, family_spec, ~ {
x <- data.frame(
cf = names(.x),
N = .x
)
y <- data.frame(
cf = names(.y),
S_i = .y
)
left_join(x, y)
})
View(family_spec_pa)
View(family_spec_pa[["wgs"]])
ggplot(family_spec_pa$wts, aes(x=N, y=S_i)) +
geom_point()
family_spec_pa <- map2(family_pa, family_spec, ~ {
x <- data.frame(
cf = names(.x),
N = .x
)
y <- data.frame(
cf = names(.y),
S_i = .y
)
left_join(x, y) %>%
mutate(
cc = str_extract(cf, "[A-Za-z]+")
)
})
ggplot(family_spec_pa$wts, aes(x=N, y=S_i)) +
geom_point(aes(colour = cc))
family_spec_pa <- map2(family_pa, family_spec, ~ {
x <- data.frame(
cf = names(.x),
N = .x
)
y <- data.frame(
cf = names(.y),
S_i = .y
)
left_join(x, y) %>%
mutate(
cc = str_extract(cf, "[A-Za-z]+")
) %>%
filter(N > 0)
})
ggplot(family_spec_pa$wts, aes(x=N, y=S_i)) +
geom_point(aes(colour = cc))
ggplot(family_spec_pa$wts, aes(x=N, y=S_i)) +
geom_point() +
facet_wrap(~ cc)
family_Hj <- map(family_count, diversity, base = 2)
family_dj <- map(family_count, sampleSpecificity)
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("cf") %>%
mutate(cc = str_extract(cf, "[A-Za-z]+"))
})
family_Hj <- map(family_count, diversity, base = 2, MARGIN = 2)
family_dj <- map(family_count, sampleSpecificity)
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("cf") %>%
mutate(cc = str_extract(cf, "[A-Za-z]+"))
})
View(family_Hj_dj)
View(family_Hj_dj[["wts"]])
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("sample") %>%
mutate(cc = str_extract(cf, "[A-Za-z]+")) %>%
left_join(env_data)
})
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("sample") %>%
mutate(type = str_extract(sample, "[A-Za-z]+")) %>%
left_join(env_data)
})
View(family_Hj_dj[["wgs"]])
View(family_Hj_dj[["wts"]])
View(env_data)
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("sample") %>%
left_join(env_data)
})
View(family_Hj_dj[["wts"]])
ggplot(family_Hj_dj, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type)
ggplot(family_Hj_dj$wts, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type)
family_Hj <- map(family_count, ~ diversity(.x, base = 2, MARGIN = 2) / log2(nrow(.x)))
family_dj <- map(family_count, ~ sampleSpecificity(.x) / log2(ncol(.x)))
family_Hj_dj <- map2(family_Hj, family_dj, ~ {
x <- data.frame(
Hj = .x,
dj = .y
) %>%
rownames_to_column("sample") %>%
left_join(env_data)
})
ggplot(family_Hj_dj$wts, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type)
ggplot(family_Hj_dj$wts, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type) +
scale_colour_viridis_c()
ggplot(family_Hj_dj$wts, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_colour_viridis_c()
ggplot(family_Hj_dj$wts, aes(x=Hj, y=dj, colour=salinity)) +
geom_point() +
facet_wrap(~ type) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
scale_colour_viridis_c()
ggplot(family_spec_pa$wts, aes(x=N, y=S_i)) +
geom_point() +
facet_wrap(~ cc)
source("C:/Users/jboe440/OneDrive/Current items/Projects/estuarine-CAZyme-diversity/scripts/CAZyme_beta_diversity.R", echo=TRUE)
library(edgeR)
source("C:/Users/jboe440/OneDrive/Current items/Projects/estuarine-CAZyme-diversity/scripts/CAZyme_beta_diversity.R", echo=TRUE)
View(CO_score)
View(CO_score[["wgs_TPM"]])
